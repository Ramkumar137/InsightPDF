from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io
from datetime import datetime


class ExportService:
    """
    Service for exporting summaries to different formats
    """

    @staticmethod
    def export_to_txt(summary_data: dict) -> bytes:
        """
        Export summary to plain text format

        Args:
            summary_data: Dictionary containing summary information

        Returns:
            Text file content as bytes
        """
        content = f"""PDF Summary
{'=' * 50}

Files: {', '.join(summary_data.get('file_names', []))}
Context: {summary_data.get('context_type', 'general').title()}
Generated: {summary_data.get('created_at', datetime.utcnow()).strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 50}

{summary_data.get('summary', '')}

{'=' * 50}
Generated by PDF Summarizer API
"""
        return content.encode('utf-8')

    @staticmethod
    def export_to_pdf(summary_data: dict) -> bytes:
        """
        Export summary to PDF format using ReportLab

        Args:
            summary_data: Dictionary containing summary information

        Returns:
            PDF file content as bytes
        """
        buffer = io.BytesIO()

        # Create PDF document
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()

        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            textColor='#2C3E50',
            spaceAfter=30,
            alignment=1  # Center
        )

        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=14,
            textColor='#34495E',
            spaceAfter=12
        )

        body_style = ParagraphStyle(
            'CustomBody',
            parent=styles['BodyText'],
            fontSize=11,
            leading=16,
            spaceAfter=12
        )

        # Build content
        story = []

        # Title
        story.append(Paragraph("PDF Summary", title_style))
        story.append(Spacer(1, 0.2 * inch))

        # Metadata
        story.append(Paragraph("Document Information", heading_style))

        files_text = ", ".join(summary_data.get('file_names', []))
        story.append(Paragraph(f"<b>Files:</b> {files_text}", body_style))

        context = summary_data.get('context_type', 'general').title()
        story.append(Paragraph(f"<b>Context:</b> {context}", body_style))

        created = summary_data.get('created_at', datetime.utcnow()).strftime('%Y-%m-%d %H:%M:%S')
        story.append(Paragraph(f"<b>Generated:</b> {created}", body_style))

        story.append(Spacer(1, 0.3 * inch))

        # Summary content
        story.append(Paragraph("Summary", heading_style))

        summary_text = summary_data.get('summary', '').replace('\n', '<br/>')
        story.append(Paragraph(summary_text, body_style))

        # Build PDF
        doc.build(story)

        # Get PDF content
        pdf_content = buffer.getvalue()
        buffer.close()

        return pdf_content

    @staticmethod
    def export_to_docx(summary_data: dict) -> bytes:
        """
        Export summary to DOCX format using python-docx

        Args:
            summary_data: Dictionary containing summary information

        Returns:
            DOCX file content as bytes
        """
        doc = Document()

        # Title
        title = doc.add_heading('PDF Summary', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Add spacing
        doc.add_paragraph()

        # Metadata section
        doc.add_heading('Document Information', level=1)

        # Files
        files_para = doc.add_paragraph()
        files_para.add_run('Files: ').bold = True
        files_para.add_run(', '.join(summary_data.get('file_names', [])))

        # Context
        context_para = doc.add_paragraph()
        context_para.add_run('Context: ').bold = True
        context_para.add_run(summary_data.get('context_type', 'general').title())

        # Date
        date_para = doc.add_paragraph()
        date_para.add_run('Generated: ').bold = True
        date_para.add_run(
            summary_data.get('created_at', datetime.utcnow()).strftime('%Y-%m-%d %H:%M:%S')
        )

        # Add spacing
        doc.add_paragraph()

        # Summary section
        doc.add_heading('Summary', level=1)

        # Add summary text
        summary_text = summary_data.get('summary', '')
        for paragraph_text in summary_text.split('\n'):
            if paragraph_text.strip():
                doc.add_paragraph(paragraph_text)

        # Save to buffer
        buffer = io.BytesIO()
        doc.save(buffer)

        # Get DOCX content
        docx_content = buffer.getvalue()
        buffer.close()

        return docx_content